; These are the docs and also the test cases. Each logical line
; in this script should evaluate to pass

; Comments are prefixed by ; and continue to the end of the line
; Whitespace and newlines are ignored
; Undefined symbols evaluate to themselves

pass

; () is nil - the only false-y cell;
; everything else is considered true


; if evaluates and returns its second arg if the first is true
; otherwise it evaluates and returns the third arg
if 1 pass fail
if nil fail pass
if nil fail else pass

test 1 1

test '1 1
test 'a a
test '(1 . 1) (1 . 1)
test '(a . (b . (c . nil))) (a b c)

; The quote function returns its arguments (a list) unevaluated
; 'cdr is syntactic sugar for (quote . cdr)
test '(car (quote cdr)) 'cdr

; The eval function evaluates its argument
test '(eval sum 1 2) 3
test '(eval '(car (cons a b))) a

test '(not nil) true
test '(not (not true)) true

test '(and foo bar) bar
test '(not (and foo nil)) true
test '(not (and nil foo)) true
test '(not (and nil nil)) true

; ispair returns its single argument if it is a pair; otherwise nil
test '(not (ispair a)) true
test '(car (ispair (a b))) a

test '(list-equal nil nil) true
test '(list-equal (a b) (a b)) true
test '(list-equal (nil b) (nil b)) true

test '(not (list-equal (a nil) (a b))) true
test '(not (list-equal (a d f) (a f d))) true

test '(or foo nil) foo
test '(or nil foo) foo
test '(or foo foo) foo
test '(nor nil nil) true

; f is not defined here so it is left unevaluated.
test '(reduce f (1 2 3) 0) (f 1 (f 2 (f 3 0)))
test '(map f (1 2 3)) ((f 1) (f 2) (f 3))

test '(reduce sum (1 2 3) 0) 6

; sum returns the sum of its arguments; it does not sum lists
test '(sum 1 2 3 4) 10

; but if we apply sum to a list, we achieve the equivalent result
def sumlist lambda l apply sum l
test '(sumlist (1 2 3 4)) 10

; now we can test map
test '(map sumlist ((2 4 6) (1 3 5 7) (2 3))) (12 16 5)

test '(all (1 2 foo bar)) true
test '(all (1 2 nil bar)) nil
test '(all nil) true

test '(any (1 2 foo bar)) 1
test '(any (1 2 nil bar)) 1
test '(any (nil nil nil)) nil
test '(any nil) nil

test '(none (1 2 foo bar)) nil
test '(none (1 2 nil bar)) nil
test '(none (nil nil nil)) true
test '(none (nil)) true
test '(none nil) true

; asc: return the minimum arg if args are in strictly ascending order
;      otherwise nil
test '(asc 1 2 3) 1
test '(asc 3 2 1) nil

; sum: return the sum of its arguments
test '(sum 1 2 3 4) 10

; product: return the product of its arguments
test '(product 1 2 3 4) 24

; (apply f '(a b c)) is equivalent to (f a b c)
test '(apply sum '(1 2 3 4)) 10

; boring recursive example
def factorial lambda x (
    if (asc x 1)
        1
        (product x (factorial (sum x -1))))

test '(factorial 19) 121645100408832000

; *exciting* and slow recursive example
def fib lambda x (
    if (asc x 2)
        x
        (sum (fib (sum x -1)) (fib (sum x -2))))

test '(fib 10) 55

; faster recursive example
def fibpair lambda x (
    if (asc x 2)
        (1 1)
        (apply  (lambda (a b) b (sum a b))
                (fibpair (sum x -1))))


def fib lambda x (car (fibpair x))

test '(fibpair 10) (55 89)
test '(fib 92) 7540113804746346429

; some lambda regression tests

test '((lambda x x) 1) 1
test '((lambda (x) x) 1) 1
test '((lambda (x) (x)) 1) 1
test '((lambda x (x)) 1) 1

test '((lambda (x y) x) 1 2) 1
test '((lambda (x y) y) 1 2) 2

test '((lambda (a b) (a b)) 1 2) (quote 1 2)
test '(car (cdr ((lambda (a b) a b) 1 2))) 2
test '(car (cdr ((lambda (a b) (a b)) 1 2))) 2
test '(car (cdr ((lambda (a b) list a b) 1 2))) 2

; filter out numbers less than 1
test '(filter (lambda x (asc 0 x)) (4 -5 2 -67 0)) (4 2)

; filtering an empty list yields an empty list
test '(filter sum nil) nil

; filtering with the identity function does not affect the list
test '(filter (lambda x x) (a b c)) (a b c)

test '(concat (a b c d) (x y z)) (a b c d x y z)
test '(concat nil (x y z)) (x y z)
test '(concat (a b c d) nil) (a b c d)
test '(concat nil nil) nil

test '(reverse nil) nil
test '(reverse (a b c)) (c b a)

test '(range 4) (0 1 2 3)
test '(range -1) nil

test '(repeat z 3) (z z z)
test '(repeat z 0) nil
test '(repeat nil 2) (nil nil)

test '(zip (a b c) (1 2 3)) ((a . 1) (b . 2) (c . 3))

test '(void (sum 1 2 3)) nil

void (libc.puts
        (glib.g_base64_decode cGFzczogZ2xpYiBiYXNlNjQgd29ya3M=
        (libc.malloc 4)))
