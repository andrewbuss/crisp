quotesym="'"
dot="."
space=" "
left_paren="("
right_paren=")"
x="x"
y="y"
z="z"
t="t"
if="if"
eval="eval"
quote="quote"
lambda="lambda"
apply="apply"
car="car"
cdr="cdr"
cons="cons"
sum="sum"
product="product"
modulus="modulus"
list="list"
concat="concat"
equal="equal"
ispair="ispair"
same="same"
def="def"
with="with"
asc="asc"
typeof="typeof"
macro="macro"
queueempty="queue.empty"
queuetail="queue.tail"
queue_head="queue.head"
q="q"
queue_snoc="queue.snoc"
queue_new="queue.new"
queue="queue"
dict="dict"
key="key"
this_map_lookup="this.map_lookup"
map_lookup="map_lookup"
old_assoc="old-assoc"
MAP="MAP"
this_mkmap="this.mkmap"
mkmap="mkmap"
this_MAP="this.MAP"
i="i"
split_at="split-at"
split_at_fn="split-at-fn"
testfails="testfails"
count_fails="count-fails"
t="t"
fails="fails"
ts="ts"
report_fails="report-fails"
h="h"
find="find"
stop="stop"
step="step"
unfold="unfold"
range="range"
end="end"
reversed_range="reversed-range"
unzip="unzip"
none="none"
any="any"
all="all"
filter="filter"
reduce="reduce"
foldl="foldl"
init="init"
foldr="foldr"
testwith="testwith"
fail="fail:"
pass="pass:"
expected="expected"
actual="actual"
test="test"
list_equal="list-equal"
defrec="defrec"
f_curried="f-curried"
args_curried="args-curried"
uncurrier="uncurrier"
num_args="num-args"
rec="rec"
p="p"
riffle="riffle"
n="n"
applyN="applyN"
last="last"
result="result"
rotate_right="rotate-right"
count="count"
val="val"
repeat="repeat"
fn="fn"
map="map"
reverse="reverse"
r="r"
reverse_concat="reverse-concat"
recursive_swap="recursive-swap"
l="l"
len="len"
defrec2="defrec2"
defrec1="defrec1"
f_recursive="f-recursive"
f_args="f-args"
rec2="rec2"
f_def="f-def"
f_arg="f-arg"
f_name="f-name"
rec1="rec1"
makerec="makerec"
y="y"
uncurry="uncurry"
curry="curry"
f="f"
papply="papply"
identity="identity"
rest="rest"
first="first"
do="do"
body="body"
void="void"
cdddar="cdddar"
cdddr="cdddr"
cddar="cddar"
cadr="cadr"
cdar="cdar"
cddr="cddr"
caar="caar"
sub="sub"
neg="neg"
inc="inc"
x="x"
dec="dec"
neq="neq"
nor="nor"
nand="nand"
or="or"
b="b"
and="and"
true="true"
a="a"
not="not"
nil="nil"
this_ispair="this.ispair"
ispair="ispair"
this_zip_fn="this.zip_fn"
zip="zip"
this_hash="this.hash"
hash="hash"
this_modulus="this.modulus"
modulus="modulus"
this_product="this.product"
product="product"
this_sum="this.sum"
sum="sum"
this_asc="this.asc"
asc="asc"
this_concat_fn="this.concat_fn"
concat="concat"
this_assoc_fn="this.assoc_fn"
assoc="assoc"
register_type="register-type"
native_macro="native-macro"
native_fn="native-fn"
this="this"
std="std"
GLOBALS="GLOBALS"
cons="cons"
with="with"
if="if"
apply="apply"
import="import"
dlsym="dlsym"
dlopen="dlopen"
typeof="typeof"
macro="macro"
def="def"
same="same"
equal="equal"
list="list"
cdr="cdr"
car="car"
lambda="lambda"
quote="quote"
eval="eval"

