def assoc native-function this.assoc_fn
def apply native-function this.apply_fn
def concat native-function this.concat_fn
def asc native-function this.asc
def sum native-function this.sum
def product native-function this.product
def modulus native-function this.modulus
def hash native-function this.hash
def zip native-function this.zip_fn
def ispair native-function this.ispair

def nil

; the opposite of nil is true
def not lambda a if a nil true

; if a and b are non-nil, return b
def and lambda (a b) if a b nil
def nand lambda (a b) not (and a b)

; return a if either a or b are non-nil
def or lambda (a b) if a a b
def nor lambda (a b) not (or a b)
def neq lambda (a b) not (equal a b)

def dec lambda x (sum x -1)
def inc lambda x (sum x 1)
def neg lambda x (product x -1)
def sub lambda (a b) (sum a (neg b))

; evaluate arguments and return NIL
; useful for functions with side-effects
def void lambda _

; the Y combinator
def makerec lambda f (
    (lambda x x x)
    (lambda x f (lambda y (x x) y)))

def defrec lambda (name args body) (
    with inner (eval lambda args body)
    with outer (eval lambda name inner)
    eval def name makerec outer)

void (
    with list-equal (lambda (a b)
        if (nor a b)                         ; if both are nil, these are equal
            true
        if (and a b) (                       ; but either is nil, they are not
            if (nor (ispair a) (ispair b))   ; if neither is a pair, compare directly
                (equal a b)
            if (and (ispair a) (ispair b)) (      ; but if either is not a pair, they are not equal
                and (list-equal (car a) (car b))  ; both are pairs, so recursively compare them
                    (list-equal (cdr a) (cdr b))))
    )

    (def test lambda (actual expected)
        if (list-equal (eval actual) expected)
            (pass: actual == expected)
        (fail: actual != expected))

    (def testwith lambda (f x expected)
        with actual (apply f x)
        if (list-equal actual expected)
            (pass: f x == expected)
        (fail: f x != expected))
    (def list-equal list-equal)
)

def caar lambda x car (car x)
def cddr lambda x cdr (cdr x)
def cdar lambda x car (cdr x)
def cadr lambda x cdr (car x)

; (reduce f (1 2 3) init) is equivalent to (f 1 (f 2 (f 3 init)))
def reduce lambda (fn list init) (
    if (not list)
        init
    fn (car list) (reduce fn (cdr list) init))

; (map f (1 2 3)) is equivalent to (f 1) (f 2) (f 3)
def map lambda (fn list) (
    if list
        (cons (fn (car list)) (map fn (cdr list))))

; is the entire list non-nil?
def all lambda list reduce and list true

; is at least one element non-nil?
def any lambda list reduce or list nil

; are all elements nil?
def none lambda list not (any list)

; yield a list containing each element i of l
; such that (f i) is non-nil
def filter lambda (f l) (
    if l (
        if (f (car l))
            (cons (car l) (filter f (cdr l)))
        filter f (cdr l))
)

; concatenate the reverse of l with r
def reverse-concat lambda (l r) (
    if (not l)
        r
    reverse-concat (cdr l) (cons (car l) r))

; return l in reverse order
def reverse lambda l reverse-concat l nil

def >= lambda (a b) or (equal a b) (asc b a)
def reversed-range lambda end (
    if (>= end 0)
        (cons end (reversed-range (dec end))))

; return 0 to end, right-exclusive
def range lambda end reverse (reversed-range (dec end))

def repeat lambda (val count) (
    if (asc count 1)
        nil
    cons val (repeat val (dec count)))


def zip lambda (l r) (
    if (and l r) (
        cons (cons (car l) (car r))
             (zip (cdr l) (cdr r))))

def len lambda l (
    if l (inc (len (cdr l)))
    0)
